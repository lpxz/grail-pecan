<org.apache.lucene.store.RAMDirectory: java.lang.String[] list()>
<org.apache.lucene.store.RAMDirectory: boolean fileExists(java.lang.String)>
<org.apache.lucene.store.RAMDirectory: long fileModified(java.lang.String)>
<org.apache.lucene.store.RAMDirectory: void touchFile(java.lang.String)>
<org.apache.lucene.store.RAMDirectory: long fileLength(java.lang.String)>
<org.apache.lucene.store.RAMDirectory: long sizeInBytes()>
<org.apache.lucene.store.RAMDirectory: void deleteFile(java.lang.String)>
<org.apache.lucene.store.RAMDirectory: void renameFile(java.lang.String,java.lang.String)>
<org.apache.lucene.store.RAMDirectory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String)>
<org.apache.lucene.store.RAMDirectory: org.apache.lucene.store.IndexInput openInput(java.lang.String)>
<org.apache.lucene.index.IndexWriter: void acquireWrite()>
<org.apache.lucene.index.IndexWriter: void releaseWrite()>
<org.apache.lucene.index.IndexWriter: void acquireRead()>
<org.apache.lucene.index.IndexWriter: void releaseRead()>
<org.apache.lucene.index.IndexWriter: void ensureOpen(boolean)>
<org.apache.lucene.index.IndexWriter: void ensureOpen()>
<org.apache.lucene.index.IndexWriter: void setMessageID(java.io.PrintStream)>
<org.apache.lucene.index.IndexWriter: void setRollbackSegmentInfos(org.apache.lucene.index.SegmentInfos)>
<org.apache.lucene.index.IndexWriter: void setMergeScheduler(org.apache.lucene.index.MergeScheduler)>
<org.apache.lucene.index.IndexWriter: boolean shouldClose()>
<org.apache.lucene.index.IndexWriter: void closeInternal(boolean)>
<org.apache.lucene.index.IndexWriter: boolean flushDocStores()>
<org.apache.lucene.index.IndexWriter: int docCount()>
<org.apache.lucene.index.IndexWriter: int maxDoc()>
<org.apache.lucene.index.IndexWriter: int numDocs()>
<org.apache.lucene.index.IndexWriter: boolean hasDeletions()>
<org.apache.lucene.index.IndexWriter: void addDocument(org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer)>
<org.apache.lucene.index.IndexWriter: void updateDocument(org.apache.lucene.index.Term,org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer)>
<org.apache.lucene.index.IndexWriter: int getSegmentCount()>
<org.apache.lucene.index.IndexWriter: int getNumBufferedDocuments()>
<org.apache.lucene.index.IndexWriter: int getDocCount(int)>
<org.apache.lucene.index.IndexWriter: int getFlushCount()>
<org.apache.lucene.index.IndexWriter: int getFlushDeletesCount()>
<org.apache.lucene.index.IndexWriter: java.lang.String newSegmentName()>
<org.apache.lucene.index.IndexWriter: void optimize(int,boolean)>
<org.apache.lucene.index.IndexWriter: boolean optimizeMergesPending()>
<org.apache.lucene.index.IndexWriter: void expungeDeletes(boolean)>
<org.apache.lucene.index.IndexWriter: void updatePendingMerges(int,boolean)>
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()>
<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.MergePolicy$OneMerge getNextExternalMerge()>
<org.apache.lucene.index.IndexWriter: void startTransaction(boolean)>
<org.apache.lucene.index.IndexWriter: void rollbackTransaction()>
<org.apache.lucene.index.IndexWriter: void commitTransaction()>
<org.apache.lucene.index.IndexWriter: void rollbackInternal()>
<org.apache.lucene.index.IndexWriter: void finishMerges(boolean)>
<org.apache.lucene.index.IndexWriter: void checkpoint()>
<org.apache.lucene.index.IndexWriter: void addIndexes(org.apache.lucene.store.Directory[])>
<org.apache.lucene.index.IndexWriter: void resetMergeExceptions()>
<org.apache.lucene.index.IndexWriter: void addIndexesNoOptimize(org.apache.lucene.store.Directory[])>
<org.apache.lucene.index.IndexWriter: void resolveExternalSegments()>
<org.apache.lucene.index.IndexWriter: void addIndexes(org.apache.lucene.index.IndexReader[])>
<org.apache.lucene.index.IndexWriter: void waitForCommit()>
<org.apache.lucene.index.IndexWriter: void doneCommit()>
<org.apache.lucene.index.IndexWriter: void finishCommit()>
<org.apache.lucene.index.IndexWriter: boolean doFlush(boolean,boolean)>
<org.apache.lucene.index.IndexWriter: int numRamDocs()>
<org.apache.lucene.index.IndexWriter: void commitMergedDeletes(org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.IndexWriter: boolean commitMerge(org.apache.lucene.index.MergePolicy$OneMerge,org.apache.lucene.index.SegmentMerger,int)>
<org.apache.lucene.index.IndexWriter: void merge(org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.IndexWriter: boolean registerMerge(org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.IndexWriter: void mergeInit(org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.IndexWriter: void _mergeInit(org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.IndexWriter: boolean doCommitBeforeMergeCFS(org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.IndexWriter: void mergeFinish(org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.IndexWriter: int mergeMiddle(org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.IndexWriter: void addMergeException(org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.IndexWriter: boolean applyDeletes()>
<org.apache.lucene.index.IndexWriter: int getBufferedDeleteTermsSize()>
<org.apache.lucene.index.IndexWriter: int getNumBufferedDeleteTerms()>
<org.apache.lucene.index.IndexWriter: java.lang.String segString()>
<org.apache.lucene.index.IndexWriter: java.lang.String segString(org.apache.lucene.index.SegmentInfos)>
<org.apache.lucene.index.IndexWriter: boolean startSync(java.lang.String,java.util.Collection)>
<org.apache.lucene.index.IndexWriter: void finishSync(java.lang.String,boolean)>
<org.apache.lucene.index.IndexWriter: boolean waitForAllSynced(java.util.Collection)>
<org.apache.lucene.index.IndexWriter: void syncPause(long)>
<org.apache.lucene.index.IndexWriter: void doWait()>
<org.apache.lucene.index.IndexWriter: void startCommit(long)>
<org.apache.lucene.index.IndexReader: int getRefCount()>
<org.apache.lucene.index.IndexReader: void incRef()>
<org.apache.lucene.index.IndexReader: void decRef()>
<org.apache.lucene.index.IndexReader: org.apache.lucene.index.IndexReader reopen()>
<org.apache.lucene.index.IndexReader: void setNorm(int,java.lang.String,byte)>
<org.apache.lucene.index.IndexReader: void deleteDocument(int)>
<org.apache.lucene.index.IndexReader: void undeleteAll()>
<org.apache.lucene.index.IndexReader: void acquireWriteLock()>
<org.apache.lucene.index.IndexReader: void flush()>
<org.apache.lucene.index.IndexReader: void commit()>
<org.apache.lucene.index.IndexReader: void close()>
<org.apache.lucene.index.SegmentInfos: java.lang.String segString(org.apache.lucene.store.Directory)>
<org.apache.lucene.index.DocumentsWriter: void updateFlushedDocCount(int)>
<org.apache.lucene.index.DocumentsWriter: int getFlushedDocCount()>
<org.apache.lucene.index.DocumentsWriter: void setFlushedDocCount(int)>
<org.apache.lucene.index.DocumentsWriter: void setInfoStream(java.io.PrintStream)>
<org.apache.lucene.index.DocumentsWriter: void setMaxFieldLength(int)>
<org.apache.lucene.index.DocumentsWriter: void setSimilarity(org.apache.lucene.search.Similarity)>
<org.apache.lucene.index.DocumentsWriter: void setRAMBufferSizeMB(double)>
<org.apache.lucene.index.DocumentsWriter: double getRAMBufferSizeMB()>
<org.apache.lucene.index.DocumentsWriter: java.lang.String getDocStoreSegment()>
<org.apache.lucene.index.DocumentsWriter: java.lang.String closeDocStore()>
<org.apache.lucene.index.DocumentsWriter: java.util.List openFiles()>
<org.apache.lucene.index.DocumentsWriter: java.util.List closedFiles()>
<org.apache.lucene.index.DocumentsWriter: void addOpenFile(java.lang.String)>
<org.apache.lucene.index.DocumentsWriter: void removeOpenFile(java.lang.String)>
<org.apache.lucene.index.DocumentsWriter: void setAborting()>
<org.apache.lucene.index.DocumentsWriter: void abort()>
<org.apache.lucene.index.DocumentsWriter: boolean pauseAllThreads()>
<org.apache.lucene.index.DocumentsWriter: void resumeAllThreads()>
<org.apache.lucene.index.DocumentsWriter: boolean allThreadsIdle()>
<org.apache.lucene.index.DocumentsWriter: void initFlushState(boolean)>
<org.apache.lucene.index.DocumentsWriter: int flush(boolean)>
<org.apache.lucene.index.DocumentsWriter: boolean setFlushPending()>
<org.apache.lucene.index.DocumentsWriter: void clearFlushPending()>
<org.apache.lucene.index.DocumentsWriter: void pushDeletes()>
<org.apache.lucene.index.DocumentsWriter: void close()>
<org.apache.lucene.index.DocumentsWriter: void initSegmentName(boolean)>
<org.apache.lucene.index.DocumentsWriter: org.apache.lucene.index.DocumentsWriterThreadState getThreadState(org.apache.lucene.document.Document,org.apache.lucene.index.Term)>
<org.apache.lucene.index.DocumentsWriter: boolean updateDocument(org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer,org.apache.lucene.index.Term)>
<org.apache.lucene.index.DocumentsWriter: int getNumBufferedDeleteTerms()>
<org.apache.lucene.index.DocumentsWriter: java.util.HashMap getBufferedDeleteTerms()>
<org.apache.lucene.index.DocumentsWriter: void remapDeletes(org.apache.lucene.index.SegmentInfos,int[][],int[],org.apache.lucene.index.MergePolicy$OneMerge,int)>
<org.apache.lucene.index.DocumentsWriter: void waitReady(org.apache.lucene.index.DocumentsWriterThreadState)>
<org.apache.lucene.index.DocumentsWriter: boolean bufferDeleteTerms(org.apache.lucene.index.Term[])>
<org.apache.lucene.index.DocumentsWriter: boolean bufferDeleteTerm(org.apache.lucene.index.Term)>
<org.apache.lucene.index.DocumentsWriter: boolean bufferDeleteQueries(org.apache.lucene.search.Query[])>
<org.apache.lucene.index.DocumentsWriter: boolean bufferDeleteQuery(org.apache.lucene.search.Query)>
<org.apache.lucene.index.DocumentsWriter: boolean deletesFull()>
<org.apache.lucene.index.DocumentsWriter: boolean timeToFlushDeletes()>
<org.apache.lucene.index.DocumentsWriter: boolean hasDeletes()>
<org.apache.lucene.index.DocumentsWriter: boolean applyDeletes(org.apache.lucene.index.SegmentInfos)>
<org.apache.lucene.index.DocumentsWriter: boolean applyDeletes(org.apache.lucene.index.IndexReader,int)>
<org.apache.lucene.index.DocumentsWriter: void addDeleteTerm(org.apache.lucene.index.Term,int)>
<org.apache.lucene.index.DocumentsWriter: void addDeleteDocID(int)>
<org.apache.lucene.index.DocumentsWriter: void addDeleteQuery(org.apache.lucene.search.Query,int)>
<org.apache.lucene.index.DocumentsWriter: boolean doBalanceRAM()>
<org.apache.lucene.index.DocumentsWriter: void finishDocument(org.apache.lucene.index.DocumentsWriterThreadState,org.apache.lucene.index.DocumentsWriter$DocWriter)>
<org.apache.lucene.index.DocumentsWriter: void waitForWaitQueue()>
<org.apache.lucene.index.DocumentsWriter: int[] getIntBlock(boolean)>
<org.apache.lucene.index.DocumentsWriter: void bytesAllocated(long)>
<org.apache.lucene.index.DocumentsWriter: void bytesUsed(long)>
<org.apache.lucene.index.DocumentsWriter: void recycleIntBlocks(int[][],int,int)>
<org.apache.lucene.index.DocumentsWriter: char[] getCharBlock()>
<org.apache.lucene.index.DocumentsWriter: void recycleCharBlocks(char[][],int)>
<org.apache.lucene.index.DocumentsWriter: void balanceRAM()>
<org.apache.lucene.index.MergePolicy$OneMerge: void setException(java.lang.Throwable)>
<org.apache.lucene.index.MergePolicy$OneMerge: java.lang.Throwable getException()>
<org.apache.lucene.index.MergePolicy$OneMerge: void abort()>
<org.apache.lucene.index.MergePolicy$OneMerge: boolean isAborted()>
<org.apache.lucene.index.MergePolicy$OneMerge: void checkAborted(org.apache.lucene.store.Directory)>
<org.apache.lucene.index.ConcurrentMergeScheduler: int getMergeThreadPriority()>
<org.apache.lucene.index.ConcurrentMergeScheduler: void setMergeThreadPriority(int)>
<org.apache.lucene.index.ConcurrentMergeScheduler: void initMergeThreadPriority()>
<org.apache.lucene.index.ConcurrentMergeScheduler: void sync()>
<org.apache.lucene.index.ConcurrentMergeScheduler: int mergeThreadCount()>
<org.apache.lucene.index.ConcurrentMergeScheduler: void merge(org.apache.lucene.index.IndexWriter)>
<org.apache.lucene.index.ConcurrentMergeScheduler: org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread getMergeThread(org.apache.lucene.index.IndexWriter,org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.ConcurrentMergeScheduler: boolean anyUnhandledExceptions()>
<org.apache.lucene.index.ConcurrentMergeScheduler: void clearUnhandledExceptions()>
<org.apache.lucene.index.ConcurrentMergeScheduler: void addMyself()>
<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: void setRunningMerge(org.apache.lucene.index.MergePolicy$OneMerge)>
<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: org.apache.lucene.index.MergePolicy$OneMerge getRunningMerge()>
<org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread: void run()>
<org.apache.lucene.store.FSDirectory: org.apache.lucene.store.FSDirectory getDirectory(java.io.File,org.apache.lucene.store.LockFactory)>
<org.apache.lucene.store.FSDirectory: void renameFile(java.lang.String,java.lang.String)>
<org.apache.lucene.store.FSDirectory: java.lang.String getLockID()>
<org.apache.lucene.store.FSDirectory: void close()>
<org.apache.lucene.index.TermInfosReader: void ensureIndexIsRead()>
<org.apache.lucene.index.TestStressIndexing2$IndexingThread: void run()>
<org.apache.lucene.index.TestStressIndexing2: java.util.Map indexRandom(int,int,int,org.apache.lucene.store.Directory)>
<org.apache.lucene.index.BufferedDeletes: void remap(org.apache.lucene.index.MergeDocIDRemapper,org.apache.lucene.index.SegmentInfos,int[][],int[],org.apache.lucene.index.MergePolicy$OneMerge,int)>
<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: byte[] getByteBlock(boolean)>
<org.apache.lucene.index.DocumentsWriter$ByteBlockAllocator: void recycleByteBlocks(byte[][],int,int)>
<org.apache.lucene.index.DocumentsWriter$WaitQueue: void reset()>
<org.apache.lucene.index.DocumentsWriter$WaitQueue: boolean doResume()>
<org.apache.lucene.index.DocumentsWriter$WaitQueue: boolean doPause()>
<org.apache.lucene.index.DocumentsWriter$WaitQueue: void abort()>
<org.apache.lucene.index.DocumentsWriter$WaitQueue: boolean add(org.apache.lucene.index.DocumentsWriter$DocWriter)>
<org.apache.lucene.index.ParallelReader: void doClose()>
<org.apache.lucene.index.TestIndexReaderReopen$10: void run()>
<org.apache.lucene.index.TestIndexReaderReopen: void testThreadSafety()>
<org.apache.lucene.index.TestIndexReaderReopen: org.apache.lucene.index.TestIndexReaderReopen$ReaderCouple refreshReader(org.apache.lucene.index.IndexReader,org.apache.lucene.index.TestIndexReaderReopen$TestReopen,int,boolean)>
<org.apache.lucene.index.TestByteSlices$ByteBlockAllocator: byte[] getByteBlock(boolean)>
<org.apache.lucene.index.TestByteSlices$ByteBlockAllocator: void recycleByteBlocks(byte[][],int,int)>
<org.apache.lucene.index.TermsHashPerThread: void abort()>
<org.apache.lucene.index.TermsHashPerField: void abort()>
<org.apache.lucene.index.TermsHashPerField: void compactPostings()>
<org.apache.lucene.index.TermsHash: void abort()>
<org.apache.lucene.index.TermsHash: void closeDocStore(org.apache.lucene.index.DocumentsWriter$FlushState)>
<org.apache.lucene.index.TermsHash: void flush(java.util.Map,org.apache.lucene.index.DocumentsWriter$FlushState)>
<org.apache.lucene.index.TermsHash: boolean freeRAM()>
<org.apache.lucene.index.TermsHash: void recyclePostings(org.apache.lucene.index.RawPostingList[],int)>
<org.apache.lucene.index.TermsHash: void getPostings(org.apache.lucene.index.RawPostingList[])>
<org.apache.lucene.index.SerialMergeScheduler: void merge(org.apache.lucene.index.IndexWriter)>
<org.apache.lucene.index.SegmentReader$Norm: void incRef()>
<org.apache.lucene.index.SegmentReader$Norm: void decRef()>
<org.apache.lucene.index.SegmentReader$Norm: void close()>
<org.apache.lucene.index.IndexModifier: void init(org.apache.lucene.store.Directory,org.apache.lucene.analysis.Analyzer,boolean)>
<org.apache.lucene.index.IndexModifier: void flush()>
<org.apache.lucene.index.IndexModifier: void addDocument(org.apache.lucene.document.Document,org.apache.lucene.analysis.Analyzer)>
<org.apache.lucene.index.IndexModifier: int deleteDocuments(org.apache.lucene.index.Term)>
<org.apache.lucene.index.IndexModifier: void deleteDocument(int)>
<org.apache.lucene.index.IndexModifier: int docCount()>
<org.apache.lucene.index.IndexModifier: void optimize()>
<org.apache.lucene.index.IndexModifier: void setInfoStream(java.io.PrintStream)>
<org.apache.lucene.index.IndexModifier: java.io.PrintStream getInfoStream()>
<org.apache.lucene.index.IndexModifier: void setUseCompoundFile(boolean)>
<org.apache.lucene.index.IndexModifier: boolean getUseCompoundFile()>
<org.apache.lucene.index.IndexModifier: void setMaxFieldLength(int)>
<org.apache.lucene.index.IndexModifier: int getMaxFieldLength()>
<org.apache.lucene.index.IndexModifier: void setMaxBufferedDocs(int)>
<org.apache.lucene.index.IndexModifier: int getMaxBufferedDocs()>
<org.apache.lucene.index.IndexModifier: void setMergeFactor(int)>
<org.apache.lucene.index.IndexModifier: int getMergeFactor()>
<org.apache.lucene.index.IndexModifier: void close()>
<org.apache.lucene.index.MultiReader: int numDocs()>
<org.apache.lucene.index.MultiReader: byte[] norms(java.lang.String)>
<org.apache.lucene.index.MultiReader: void norms(java.lang.String,byte[],int)>
<org.apache.lucene.index.MultiReader: void doSetNorm(int,java.lang.String,byte)>
<org.apache.lucene.index.MultiReader: void doClose()>
<org.apache.lucene.index.DocFieldConsumers: org.apache.lucene.index.DocFieldConsumers$PerDoc getPerDoc()>
<org.apache.lucene.index.DocFieldConsumers: void freePerDoc(org.apache.lucene.index.DocFieldConsumers$PerDoc)>
<org.apache.lucene.index.TermVectorsTermsWriter: void flush(java.util.Map,org.apache.lucene.index.DocumentsWriter$FlushState)>
<org.apache.lucene.index.TermVectorsTermsWriter: void closeDocStore(org.apache.lucene.index.DocumentsWriter$FlushState)>
<org.apache.lucene.index.TermVectorsTermsWriter: org.apache.lucene.index.TermVectorsTermsWriter$PerDoc getPerDoc()>
<org.apache.lucene.index.TermVectorsTermsWriter: void initTermVectorsWriter()>
<org.apache.lucene.index.TermVectorsTermsWriter: void finishDocument(org.apache.lucene.index.TermVectorsTermsWriter$PerDoc)>
<org.apache.lucene.index.TermVectorsTermsWriter: void free(org.apache.lucene.index.TermVectorsTermsWriter$PerDoc)>
<org.apache.lucene.index.StoredFieldsWriter: void flush(java.util.Map,org.apache.lucene.index.DocumentsWriter$FlushState)>
<org.apache.lucene.index.StoredFieldsWriter: void closeDocStore(org.apache.lucene.index.DocumentsWriter$FlushState)>
<org.apache.lucene.index.StoredFieldsWriter: org.apache.lucene.index.StoredFieldsWriter$PerDoc getPerDoc()>
<org.apache.lucene.index.StoredFieldsWriter: void abort()>
<org.apache.lucene.index.StoredFieldsWriter: void finishDocument(org.apache.lucene.index.StoredFieldsWriter$PerDoc)>
<org.apache.lucene.index.StoredFieldsWriter: void free(org.apache.lucene.index.StoredFieldsWriter$PerDoc)>
<org.apache.lucene.index.TestIndexWriter$CommitAndAddIndexes3: void handle(java.lang.Throwable)>
<org.apache.lucene.index.TestTransactions$IndexerThread: void doWork()>
<org.apache.lucene.store.SingleInstanceLockFactory: void clearLock(java.lang.String)>
<org.apache.lucene.index.IndexThread: org.apache.lucene.document.Document getDocument()>
<org.apache.lucene.index.TestIndexWriter$4: void run()>
<org.apache.lucene.store.RAMFile: long getLength()>
<org.apache.lucene.store.RAMFile: void setLength(long)>
<org.apache.lucene.store.RAMFile: long getLastModified()>
<org.apache.lucene.store.RAMFile: void setLastModified(long)>
<org.apache.lucene.store.RAMFile: byte[] addBuffer(int)>
<org.apache.lucene.store.RAMFile: byte[] getBuffer(int)>
<org.apache.lucene.store.RAMFile: int numBuffers()>
<org.apache.lucene.store.RAMFile: long getSizeInBytes()>
<org.apache.lucene.index.TestIndexReaderReopen$9: void run()>
<org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint: void delete()>
<org.apache.lucene.index.TestTransactions$SearcherThread: void doWork()>
<org.apache.lucene.index.TestIndexWriter$MyMergeScheduler: void merge(org.apache.lucene.index.IndexWriter)>
<org.apache.lucene.index.TestPayloads$ByteArrayPool: java.lang.String bytesToString(byte[])>
<org.apache.lucene.index.TestPayloads$ByteArrayPool: byte[] get()>
<org.apache.lucene.index.TestPayloads$ByteArrayPool: void release(byte[])>
<org.apache.lucene.index.TestPayloads$ByteArrayPool: int size()>
<org.apache.lucene.index.TestIndexWriter$CommitAndAddIndexes: void handle(java.lang.Throwable)>
<org.apache.lucene.index.TestIndexWriter$CommitAndAddIndexes2: void handle(java.lang.Throwable)>
<org.apache.lucene.index.store.TestRAMDirectory$1: void run()>
<org.apache.lucene.index.TestIndexModifier$PowerIndex: int docFreq(org.apache.lucene.index.Term)>
<org.apache.lucene.store.FSDirectory$FSIndexInput: void readInternal(byte[],int,int)>
<org.apache.lucene.store.NativeFSLockFactory: org.apache.lucene.store.Lock makeLock(java.lang.String)>
<org.apache.lucene.store.VerifyingLockFactory$CheckedLock: boolean obtain(long)>
<org.apache.lucene.store.VerifyingLockFactory$CheckedLock: boolean obtain()>
<org.apache.lucene.store.VerifyingLockFactory$CheckedLock: boolean isLocked()>
<org.apache.lucene.store.VerifyingLockFactory$CheckedLock: void release()>
<org.apache.lucene.store.VerifyingLockFactory: org.apache.lucene.store.Lock makeLock(java.lang.String)>
<org.apache.lucene.store.VerifyingLockFactory: void clearLock(java.lang.String)>
<org.apache.lucene.store.MockRAMInputStream: void close()>
<org.apache.lucene.store.TestLockFactory$MockLockFactory: org.apache.lucene.store.Lock makeLock(java.lang.String)>
<org.apache.lucene.store.SingleInstanceLock: boolean obtain()>
<org.apache.lucene.store.SingleInstanceLock: void release()>
<org.apache.lucene.store.SingleInstanceLock: boolean isLocked()>
<org.apache.lucene.store.NativeFSLock: boolean obtain()>
<org.apache.lucene.store.NativeFSLock: void release()>
<org.apache.lucene.store.NativeFSLock: boolean isLocked()>
<org.apache.lucene.search.FieldCacheImpl$Cache: java.lang.Object get(org.apache.lucene.index.IndexReader,java.lang.Object)>
<org.apache.lucene.search.MultiSearcherThread: void run()>
<org.apache.lucene.search.FieldDocSortedHitQueue: void setFields(org.apache.lucene.search.SortField[])>
<org.apache.lucene.search.CachingWrapperFilterHelper: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)>
<org.apache.lucene.search.FilterManager: org.apache.lucene.search.FilterManager getInstance()>
<org.apache.lucene.search.FilterManager: org.apache.lucene.search.Filter getFilter(org.apache.lucene.search.Filter)>
<org.apache.lucene.search.CachingWrapperFilter: java.util.BitSet bits(org.apache.lucene.index.IndexReader)>
<org.apache.lucene.search.CachingWrapperFilter: org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader)>
<org.apache.lucene.search.FilterManager$FilterCleaner: void run()>
<org.apache.lucene.search.FuzzyTermEnum: float similarity(java.lang.String)>
<org.apache.lucene.search.TestTimeLimitedCollector$1: void run()>
<org.apache.lucene.search.CachingSpanFilter: org.apache.lucene.search.SpanFilterResult getCachedResult(org.apache.lucene.index.IndexReader)>
