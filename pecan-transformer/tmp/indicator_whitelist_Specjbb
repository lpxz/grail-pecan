<spec.reporter.GraphImage: double getSuggestedMinXScale(double,double)>
<spec.reporter.GraphImage: double getSuggestedMinYScale(double,double)>
<spec.jbb.TransactionManager: spec.jbb.Company$runModes getrunMode()>
<spec.jbb.TransactionManager: void setrunMode(spec.jbb.Company$runModes)>
<spec.jbb.TransactionManager: void go()>
<spec.jbb.Infrastructure$SynchronizedJBBDataStorage: boolean containsKey(java.lang.Object)>
<spec.jbb.Infrastructure$SynchronizedJBBDataStorage: java.lang.Object get(java.lang.Object)>
<spec.jbb.Infrastructure$SynchronizedJBBDataStorage: java.lang.Object put(java.lang.Object,java.lang.Object)>
<spec.jbb.Infrastructure$SynchronizedJBBDataStorage: java.lang.Object remove(java.lang.Object)>
<spec.jbb.Infrastructure$SynchronizedJBBDataStorage: int size()>
<spec.jbb.Infrastructure$SynchronizedJBBDataStorage: java.util.Iterator elements()>
<spec.jbb.JBBmain: void startJBBthread(short)>
<spec.jbb.JBBmain: void stopJBBthread()>
<spec.jbb.OrderStatusTransaction: void delete()>
<spec.jbb.OrderStatusTransaction: void init()>
<spec.jbb.OrderStatusTransaction: void display()>
<spec.jbb.OrderStatusTransaction: void initializeTransactionLog()>
<spec.jbb.OrderStatusTransaction: void processTransactionLog()>
<spec.jbb.Company: void displayResultTotals(boolean)>
<spec.jbb.Item: void setUsingRandom(int)>
<spec.jbb.History: java.lang.String buildData(java.lang.String,java.lang.String)>
<spec.jbb.NewOrderTransaction: void display()>
<spec.jbb.NewOrderTransaction: void processTransactionLog()>
<spec.jbb.NewOrderTransaction: void processPreloadedOrders()>
<spec.jbb.NewOrderTransaction: void setDistrictandCustomer(byte,short)>
<spec.jbb.StockLevelTransaction: void delete()>
<spec.jbb.StockLevelTransaction: void processTransactionLog()>
<spec.jbb.DeliveryTransaction: void display(java.io.PrintStream)>
<spec.jbb.DeliveryTransaction: void processTransactionLog()>
<spec.jbb.DeliveryTransaction: boolean process()>
<spec.jbb.CustomerReportTransaction: void delete()>
<spec.jbb.CustomerReportTransaction: void init()>
<spec.jbb.CustomerReportTransaction: void display()>
<spec.jbb.CustomerReportTransaction: void initializeTransactionLog()>
<spec.jbb.CustomerReportTransaction: void processTransactionLog()>
<spec.jbb.validity.syncTest: int syncMethod(int)>
<spec.jbb.validity.syncTest: int syncMethod2(int)>
<spec.jbb.infra.Util.TransactionLogBuffer: void display()>
<spec.jbb.TimerData: void formatResults(spec.jbb.infra.Util.TransactionLogBuffer)>
<spec.jbb.TimerData: void displayResults(java.lang.String,long,long)>
<spec.jbb.JBButil: void setLog(java.util.logging.Logger)>
<spec.jbb.PaymentTransaction: void delete()>
<spec.jbb.PaymentTransaction: void init()>
<spec.jbb.PaymentTransaction: void display()>
<spec.jbb.PaymentTransaction: void initializeTransactionLog()>
<spec.jbb.PaymentTransaction: void processTransactionLog()>
