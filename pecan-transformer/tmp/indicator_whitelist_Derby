<org.apache.derby.impl.drda.DRDAConnThread: void close()>
<org.apache.derby.impl.drda.DRDAConnThread: void setLogConnections(boolean)>
<org.apache.derby.impl.drda.DRDAConnThread: void setTimeSlice(long)>
<org.apache.derby.impl.drda.DRDAConnThread: boolean closed()>
<org.apache.derby.impl.drda.DRDAConnThread: boolean getLogConnections()>
<org.apache.derby.impl.drda.DRDAConnThread: long getTimeSlice()>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void consoleExceptionPrintTrace(java.lang.Throwable)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void consoleMessage(java.lang.String)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void blockingStart(java.io.PrintWriter)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void startNetworkServer()>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void directShutdown()>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void processCommands(org.apache.derby.impl.drda.DDMReader,org.apache.derby.impl.drda.DDMWriter,org.apache.derby.impl.drda.Session)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: org.apache.derby.impl.drda.Session getNextSession(org.apache.derby.impl.drda.Session)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void runQueueAdd(org.apache.derby.impl.drda.Session)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: boolean getLogConnections()>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void setLogConnections(boolean)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: boolean setTrace(boolean)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void setTimeSlice(int)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: int getMinThreads()>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void setMinThreads(int)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: int getMaxThreads()>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void setMaxThreads(int)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: boolean getTraceAll()>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void setTraceAll(boolean)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: java.lang.String getTraceDirectory()>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void setTraceDirectory(java.lang.String)>
<org.apache.derby.impl.drda.NetworkServerControlImpl: java.util.Properties getPropertyValues()>
<org.apache.derby.impl.drda.NetworkServerControlImpl: void addSession(java.net.Socket)>
<org.apache.derby.impl.drda.ClientThread: void run()>
<org.apache.derby.impl.drda.DssTrace: void startComBufferTrace(java.lang.String)>
<org.apache.derby.impl.drda.DssTrace: void stopComBufferTrace()>
<org.apache.derby.impl.drda.DssTrace: void writeComBufferData(byte[],int,int,int,java.lang.String,java.lang.String,int)>
<org.apache.derby.impl.drda.XADatabase: void makeConnection(java.util.Properties)>
<org.apache.derby.jdbc.EmbeddedXADataSource: void setupResourceAdapter(java.lang.String,java.lang.String,boolean)>
<org.apache.derby.jdbc.EmbeddedDataSource: org.apache.derby.jdbc.InternalDriver findDriver()>
<org.apache.derby.jdbc.ReferenceableDataSource: void setDatabaseName(java.lang.String)>
<org.apache.derby.jdbc.InternalDriver: void boot(boolean,java.util.Properties)>
<org.apache.derby.jdbc.InternalDriver: void stop()>
<org.apache.derby.iapi.services.monitor.Monitor: boolean setMonitor(org.apache.derby.iapi.services.monitor.ModuleFactory)>
<org.apache.derby.iapi.services.monitor.Monitor: void clearMonitor()>
<org.apache.derby.iapi.services.context.ContextService: void stop()>
<org.apache.derby.iapi.services.context.ContextService: org.apache.derby.iapi.services.context.ContextManager newContextManager()>
<org.apache.derby.iapi.services.context.ContextService: void notifyAllActiveThreads(org.apache.derby.iapi.services.context.Context)>
<org.apache.derby.iapi.services.context.ContextService: void removeContext(org.apache.derby.iapi.services.context.ContextManager)>
<org.apache.derby.iapi.services.context.ContextManager: boolean setInterrupted(org.apache.derby.iapi.services.context.Context)>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: void prepareAndRelease(org.apache.derby.iapi.sql.conn.LanguageConnectionContext,org.apache.derby.iapi.sql.dictionary.TableDescriptor,org.apache.derby.iapi.store.access.TransactionController)>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: void prepareAndRelease(org.apache.derby.iapi.sql.conn.LanguageConnectionContext,org.apache.derby.iapi.sql.dictionary.TableDescriptor)>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: void prepareAndRelease(org.apache.derby.iapi.sql.conn.LanguageConnectionContext)>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: java.sql.Timestamp getCompileTime()>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: void setCompileTime()>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: java.lang.String getUsingText()>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: void setUUID(org.apache.derby.catalog.UUID)>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: org.apache.derby.iapi.types.DataTypeDescriptor[] getParams()>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: void setParams(org.apache.derby.iapi.types.DataTypeDescriptor[])>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: java.lang.Object[] getParameterDefaults()>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: void setParameterDefaults(java.lang.Object[])>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: org.apache.derby.iapi.sql.execute.ExecPreparedStatement getPreparedStatement(boolean)>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: boolean isValid()>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: void prepareToInvalidate(org.apache.derby.iapi.sql.depend.Provider,int,org.apache.derby.iapi.sql.conn.LanguageConnectionContext)>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: void makeInvalid(int,org.apache.derby.iapi.sql.conn.LanguageConnectionContext)>
<org.apache.derby.iapi.sql.dictionary.SPSDescriptor: void revalidate(org.apache.derby.iapi.sql.conn.LanguageConnectionContext)>
<org.apache.derby.iapi.sql.dictionary.TableDescriptor: java.util.List getStatistics()>
<org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor: boolean isValid()>
<org.apache.derby.iapi.sql.dictionary.TriggerDescriptor: boolean isValid()>
<org.apache.derby.iapi.sql.dictionary.DefaultDescriptor: boolean isValid()>
<org.apache.derby.impl.sql.execute.BaseActivation: void checkStatementValidity()>
<org.apache.derby.impl.sql.execute.BaseActivation: void informOfRowCount(org.apache.derby.iapi.sql.execute.NoPutResultSet,long)>
<org.apache.derby.impl.sql.execute.VTIResultSet: void setSharedState(java.lang.String,java.io.Serializable)>
<org.apache.derby.impl.sql.GenericResultDescription: void setMetaData(java.sql.ResultSetMetaData)>
<org.apache.derby.impl.sql.GenericResultDescription: java.sql.ResultSetMetaData getMetaData()>
<org.apache.derby.impl.sql.GenericResultDescription: int findColumnInsenstive(java.lang.String)>
<org.apache.derby.impl.sql.GenericPreparedStatement: boolean upToDate()>
<org.apache.derby.impl.sql.GenericPreparedStatement: org.apache.derby.iapi.sql.Activation getActivation(org.apache.derby.iapi.sql.conn.LanguageConnectionContext,boolean)>
<org.apache.derby.impl.sql.GenericPreparedStatement: void finish(org.apache.derby.iapi.sql.conn.LanguageConnectionContext)>
<org.apache.derby.impl.sql.GenericPreparedStatement: void makeInvalid(int,org.apache.derby.iapi.sql.conn.LanguageConnectionContext)>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: int startReading(org.apache.derby.iapi.sql.conn.LanguageConnectionContext)>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: void doneReading(int,org.apache.derby.iapi.sql.conn.LanguageConnectionContext)>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: void startWriting(org.apache.derby.iapi.sql.conn.LanguageConnectionContext)>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: void transactionFinished()>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: org.apache.derby.iapi.sql.dictionary.TableDescriptor finishTableDescriptor(org.apache.derby.iapi.sql.dictionary.TableDescriptor)>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: org.apache.derby.iapi.sql.dictionary.ViewDescriptor getViewDescriptor(org.apache.derby.iapi.sql.dictionary.TableDescriptor)>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: void addSPSDescriptor(org.apache.derby.iapi.sql.dictionary.SPSDescriptor,org.apache.derby.iapi.store.access.TransactionController,boolean)>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: org.apache.derby.iapi.sql.dictionary.GenericDescriptorList getTriggerDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor)>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList getConstraintDescriptors(org.apache.derby.iapi.sql.dictionary.TableDescriptor)>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: void faultInTabInfo(org.apache.derby.impl.sql.catalog.TabInfoImpl)>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: java.lang.String getSystemSQLName()>
<org.apache.derby.impl.sql.catalog.DataDictionaryImpl: java.util.Properties getQueryDescriptions(boolean)>
<org.apache.derby.impl.sql.depend.BasicDependencyManager: void addDependency(org.apache.derby.iapi.sql.depend.Dependent,org.apache.derby.iapi.sql.depend.Provider,org.apache.derby.iapi.services.context.ContextManager,org.apache.derby.iapi.store.access.TransactionController)>
<org.apache.derby.impl.sql.depend.BasicDependencyManager: void invalidateFor(org.apache.derby.iapi.sql.depend.Provider,int,org.apache.derby.iapi.sql.conn.LanguageConnectionContext)>
<org.apache.derby.impl.sql.depend.BasicDependencyManager: void clearDependencies(org.apache.derby.iapi.sql.conn.LanguageConnectionContext,org.apache.derby.iapi.sql.depend.Dependent,org.apache.derby.iapi.store.access.TransactionController)>
<org.apache.derby.impl.sql.depend.BasicDependencyManager: void clearInMemoryDependency(org.apache.derby.iapi.sql.depend.Dependency)>
<org.apache.derby.impl.sql.depend.BasicDependencyManager: org.apache.derby.iapi.sql.depend.ProviderInfo[] getPersistentProviderInfos(org.apache.derby.iapi.sql.depend.Dependent)>
<org.apache.derby.impl.sql.depend.BasicDependencyManager: void copyDependencies(org.apache.derby.iapi.sql.depend.Dependent,org.apache.derby.iapi.sql.depend.Dependent,boolean,org.apache.derby.iapi.services.context.ContextManager,org.apache.derby.iapi.store.access.TransactionController)>
<org.apache.derby.impl.sql.depend.BasicDependencyManager: int countDependencies()>
<org.apache.derby.impl.sql.depend.BasicDependencyManager: java.lang.String dumpDependencies()>
<org.apache.derby.impl.sql.GenericActivationHolder: org.apache.derby.iapi.sql.ResultSet execute()>
<org.apache.derby.impl.sql.GenericStatement: org.apache.derby.iapi.sql.PreparedStatement prepMinion(org.apache.derby.iapi.sql.conn.LanguageConnectionContext,boolean,java.lang.Object[],org.apache.derby.iapi.sql.dictionary.SchemaDescriptor,boolean)>
<org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext: org.apache.derby.iapi.sql.PreparedStatement lookupStatement(org.apache.derby.impl.sql.GenericStatement)>
<org.apache.derby.impl.sql.conn.GenericStatementContext$CancelQueryTask: void run()>
<org.apache.derby.impl.sql.conn.GenericStatementContext$CancelQueryTask: void forgetContext()>
<org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory: int getNextLCCInstanceNumber()>
<org.apache.derby.impl.services.cache.CachedItem: boolean unkeep()>
<org.apache.derby.impl.services.cache.CachedItem: void setRemoveState()>
<org.apache.derby.impl.services.cache.CachedItem: boolean isValid()>
<org.apache.derby.impl.services.cache.CachedItem: void setValidState(boolean)>
<org.apache.derby.impl.services.cache.CachedItem: void settingIdentityComplete()>
<org.apache.derby.impl.services.cache.CachedItem: org.apache.derby.iapi.services.cache.Cacheable use()>
<org.apache.derby.impl.services.cache.CachedItem: void remove(boolean)>
<org.apache.derby.impl.services.cache.CachedItem: void notifyRemover()>
<org.apache.derby.impl.services.cache.CachedItem: void setUsed(boolean)>
<org.apache.derby.impl.services.cache.CachedItem: boolean recentlyUsed()>
<org.apache.derby.impl.services.daemon.BasicDaemon: int subscribe(org.apache.derby.iapi.services.daemon.Serviceable,boolean)>
<org.apache.derby.impl.services.daemon.BasicDaemon: boolean enqueue(org.apache.derby.iapi.services.daemon.Serviceable,boolean)>
<org.apache.derby.impl.services.daemon.BasicDaemon: void clear()>
<org.apache.derby.impl.services.daemon.BasicDaemon: org.apache.derby.impl.services.daemon.ServiceRecord nextAssignment(boolean)>
<org.apache.derby.impl.services.daemon.BasicDaemon: void serviceClient(org.apache.derby.impl.services.daemon.ServiceRecord)>
<org.apache.derby.impl.services.daemon.BasicDaemon: void run()>
<org.apache.derby.impl.services.daemon.BasicDaemon: void pause()>
<org.apache.derby.impl.services.daemon.BasicDaemon: void resume()>
<org.apache.derby.impl.services.daemon.BasicDaemon: void stop()>
<org.apache.derby.impl.services.daemon.BasicDaemon: void waitUntilQueueIsEmpty()>
<org.apache.derby.impl.services.daemon.BasicDaemon: boolean stopRequested()>
<org.apache.derby.impl.services.daemon.BasicDaemon: boolean inPause()>
<org.apache.derby.impl.services.daemon.BasicDaemon: void wakeUp()>
<org.apache.derby.impl.services.daemon.BasicDaemon: boolean rest()>
<org.apache.derby.impl.services.daemon.BasicDaemon: void work(boolean)>
<org.apache.derby.impl.services.uuid.BasicUUIDFactory: org.apache.derby.catalog.UUID createUUID()>
<org.apache.derby.impl.services.jce.JCECipherProvider: int encrypt(byte[],int,int,byte[],int)>
<org.apache.derby.impl.services.jce.JCECipherProvider: int decrypt(byte[],int,int,byte[],int)>
<org.apache.derby.impl.services.stream.BasicHeaderPrintWriter: void printlnWithHeader(java.lang.String)>
<org.apache.derby.impl.services.monitor.AntiGC: void run()>
<org.apache.derby.impl.services.monitor.TopService: void setTopModule(java.lang.Object)>
<org.apache.derby.impl.services.monitor.TopService: boolean isActiveService()>
<org.apache.derby.impl.services.monitor.TopService: boolean isActiveService(org.apache.derby.impl.services.monitor.ProtocolKey)>
<org.apache.derby.impl.services.monitor.TopService: java.lang.Object findModule(org.apache.derby.impl.services.monitor.ProtocolKey,boolean,java.util.Properties)>
<org.apache.derby.impl.services.monitor.TopService: java.lang.Object bootModule(boolean,java.lang.Object,org.apache.derby.impl.services.monitor.ProtocolKey,java.util.Properties)>
<org.apache.derby.impl.services.monitor.TopService: boolean shutdown()>
<org.apache.derby.impl.services.monitor.TopService: boolean addToProtocol(org.apache.derby.impl.services.monitor.ProtocolKey,org.apache.derby.impl.services.monitor.ModuleInstance)>
<org.apache.derby.impl.services.monitor.FileMonitor: boolean initialize(boolean)>
<org.apache.derby.impl.services.monitor.FileMonitor: java.util.Properties getDefaultModuleProperties()>
<org.apache.derby.impl.services.monitor.FileMonitor: java.lang.String getJVMProperty(java.lang.String)>
<org.apache.derby.impl.services.monitor.FileMonitor: java.lang.Thread getDaemonThread(java.lang.Runnable,java.lang.String,boolean)>
<org.apache.derby.impl.services.monitor.FileMonitor: void setThreadPriority(int)>
<org.apache.derby.impl.services.monitor.FileMonitor: java.io.InputStream applicationPropertiesStream()>
<org.apache.derby.impl.services.monitor.FileMonitor: java.lang.Object run()>
<org.apache.derby.impl.services.reflect.JarLoader: java.lang.Class loadClassData(java.util.jar.JarEntry,java.io.InputStream,java.lang.String,boolean)>
<org.apache.derby.impl.services.reflect.UpdateLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<org.apache.derby.impl.services.reflect.UpdateLoader: java.io.InputStream getResourceAsStream(java.lang.String)>
<org.apache.derby.impl.services.reflect.UpdateLoader: void modifyClasspath(java.lang.String)>
<org.apache.derby.impl.services.reflect.UpdateLoader: void modifyJar(boolean)>
<org.apache.derby.impl.services.reflect.UpdateLoader: void needReload()>
<org.apache.derby.impl.services.reflect.ReflectClassesJava2: org.apache.derby.impl.services.reflect.LoadedGeneratedClass loadGeneratedClassFromData(java.lang.String,org.apache.derby.iapi.util.ByteArray)>
<org.apache.derby.impl.services.reflect.ReflectClassesJava2: java.lang.Class loadClassNotInDatabaseJar(java.lang.String)>
<org.apache.derby.impl.tools.ij.mtTestCase: java.io.BufferedInputStream initialize()>
<org.apache.derby.impl.tools.ij.mtTestCase: java.io.BufferedInputStream initialize(java.lang.String)>
<org.apache.derby.impl.tools.ij.mtTestCase: boolean grab()>
<org.apache.derby.impl.load.Import: int bumpImportCounter()>
<org.apache.derby.impl.store.access.RAMAccessManager: long getNextConglomId(int)>
<org.apache.derby.impl.store.access.RAMAccessManager: org.apache.derby.iapi.store.access.conglomerate.Conglomerate conglomCacheFind(org.apache.derby.iapi.store.access.conglomerate.TransactionManager,long)>
<org.apache.derby.impl.store.access.RAMAccessManager: void conglomCacheInvalidate()>
<org.apache.derby.impl.store.access.RAMAccessManager: void conglomCacheUpdateEntry(long,org.apache.derby.iapi.store.access.conglomerate.Conglomerate)>
<org.apache.derby.impl.store.access.RAMAccessManager: void conglomCacheAddEntry(long,org.apache.derby.iapi.store.access.conglomerate.Conglomerate)>
<org.apache.derby.impl.store.access.RAMAccessManager: void conglomCacheRemoveEntry(long)>
<org.apache.derby.impl.store.raw.RawStore: java.lang.String privGetCanonicalPath(java.io.File)>
<org.apache.derby.impl.io.DirFile4: int getExclusiveFileLock()>
<org.apache.derby.impl.io.DirFile4: void releaseExclusiveFileLock()>
<org.apache.derby.impl.io.DirFile: int getExclusiveFileLock()>
<org.apache.derby.impl.io.DirFile: void releaseExclusiveFileLock()>
<org.apache.derby.impl.jdbc.EmbedConnection30: java.sql.Savepoint commonSetSavepointCode(java.lang.String,boolean)>
<org.apache.derby.impl.jdbc.EmbedConnection30: void rollback(java.sql.Savepoint)>
<org.apache.derby.impl.jdbc.EmbedConnection30: void releaseSavepoint(java.sql.Savepoint)>
<org.apache.derby.iapi.services.memory.LowMemory: void setLowMemory()>
<org.apache.derby.iapi.services.memory.LowMemory: boolean isLowMemory()>
<org.apache.derby.iapi.services.property.PropertyValidation: java.io.Serializable doValidateApplyAndMap(org.apache.derby.iapi.store.access.TransactionController,java.lang.String,java.io.Serializable,java.util.Dictionary,boolean)>
<org.apache.derby.iapi.services.property.PropertyValidation: void addPropertySetNotification(org.apache.derby.iapi.services.property.PropertySetCallback)>
<org.apache.derby.iapi.services.property.PropertyValidation: void verifyPropertySet(java.util.Properties,java.util.Properties)>
