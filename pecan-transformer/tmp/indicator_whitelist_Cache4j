<net.sf.cache4j.impl.SynchronizedCache: void put(java.lang.Object,java.lang.Object)>
<net.sf.cache4j.impl.SynchronizedCache: java.lang.Object get(java.lang.Object)>
<net.sf.cache4j.impl.SynchronizedCache: void remove(java.lang.Object)>
<net.sf.cache4j.impl.SynchronizedCache: void clear()>
<net.sf.cache4j.impl.SynchronizedCache: void setCacheConfig(net.sf.cache4j.CacheConfig)>
<net.sf.cache4j.impl.SynchronizedCache: void clean()>
<net.sf.cache4j.impl.SynchronizedCache$CacheInfoImpl: void reset()>
<net.sf.cache4j.impl.CacheObject: void lock()>
<net.sf.cache4j.impl.CacheObject: void unlock()>
<net.sf.cache4j.impl.CacheObject: long nextId()>
<net.sf.cache4j.impl.BlockingCache$CacheInfoImpl: void incHits()>
<net.sf.cache4j.impl.BlockingCache$CacheInfoImpl: void incMisses()>
<net.sf.cache4j.impl.BlockingCache$CacheInfoImpl: void incPut()>
<net.sf.cache4j.impl.BlockingCache$CacheInfoImpl: void incRemove()>
<net.sf.cache4j.impl.BlockingCache$CacheInfoImpl: void reset()>
<net.sf.cache4j.impl.BlockingCache: void put(java.lang.Object,java.lang.Object)>
<net.sf.cache4j.impl.BlockingCache: void remove(java.lang.Object)>
<net.sf.cache4j.impl.BlockingCache: void clear()>
<net.sf.cache4j.impl.BlockingCache: void setCacheConfig(net.sf.cache4j.CacheConfig)>
<net.sf.cache4j.impl.BlockingCache: void clean()>
<net.sf.cache4j.impl.BlockingCache: void checkOverflow(int)>
<net.sf.cache4j.impl.BlockingCache: void tmapRemove(net.sf.cache4j.impl.CacheObject)>
<net.sf.cache4j.impl.BlockingCache: void tmapPut(net.sf.cache4j.impl.CacheObject)>
<net.sf.cache4j.impl.BlockingCache: net.sf.cache4j.impl.CacheObject getCacheObject(java.lang.Object)>
<net.sf.cache4j.impl.BlockingCache: void resetCacheObject(net.sf.cache4j.impl.CacheObject)>
<net.sf.cache4j.test.SynchronizedCacheTest: void incThreadCount()>
<net.sf.cache4j.test.SynchronizedCacheTest: void decThreadCount()>
<net.sf.cache4j.test.SynchronizedCacheTest: long nextId()>
<net.sf.cache4j.test.BlockingCacheTest: void incThreadCount()>
<net.sf.cache4j.test.BlockingCacheTest: void decThreadCount()>
<net.sf.cache4j.test.BlockingCacheTest: long nextId()>
<net.sf.cache4j.CacheCleaner: void setCleanInterval(long)>
<net.sf.cache4j.CacheFactory: void addCache(net.sf.cache4j.Cache)>
<net.sf.cache4j.CacheFactory: net.sf.cache4j.Cache getCache(java.lang.Object)>
<net.sf.cache4j.CacheFactory: void removeCache(java.lang.Object)>
<net.sf.cache4j.CacheFactory: java.lang.Object[] getCacheIds()>
