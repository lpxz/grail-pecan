<org.exolab.jms.jndi.ORBRemoteContext$Ref: int inc()>
<org.exolab.jms.jndi.ORBRemoteContext$Ref: int dec()>
<org.exolab.jms.scheduler.SerialTask: boolean schedule()>
<org.exolab.jms.scheduler.SerialTask: void run()>
<org.exolab.jms.scheduler.SerialTask: void stop()>
<org.exolab.jms.scheduler.SerialTask: java.lang.String toString()>
<org.exolab.jms.events.BasicEventManager: java.lang.String registerEvent(org.exolab.jms.events.Event,long)>
<org.exolab.jms.events.BasicEventManager: void unregisterEvent(java.lang.String)>
<org.exolab.jms.events.BasicEventManager: void run()>
<org.exolab.jms.events.BasicEventManager: java.lang.String generateId()>
<org.exolab.jms.persistence.RDBMSAdapter: int purgeMessages()>
<org.exolab.jms.persistence.Destinations: void add(java.sql.Connection,org.exolab.jms.client.JmsDestination)>
<org.exolab.jms.persistence.Destinations: boolean remove(java.sql.Connection,org.exolab.jms.client.JmsDestination)>
<org.exolab.jms.persistence.Destinations: org.exolab.jms.client.JmsDestination get(java.lang.String)>
<org.exolab.jms.persistence.Destinations: org.exolab.jms.client.JmsDestination get(long)>
<org.exolab.jms.persistence.Destinations: long getId(java.lang.String)>
<org.exolab.jms.persistence.Destinations: java.util.Vector getNames()>
<org.exolab.jms.persistence.Destinations: java.util.Vector getDestinations()>
<org.exolab.jms.persistence.Destinations: void close()>
<org.exolab.jms.persistence.SeedGenerator: long next(java.sql.Connection,java.lang.String)>
<org.exolab.jms.persistence.Users: void add(java.sql.Connection,org.exolab.jms.authentication.User)>
<org.exolab.jms.persistence.Users: void update(java.sql.Connection,org.exolab.jms.authentication.User)>
<org.exolab.jms.persistence.Users: boolean remove(java.sql.Connection,org.exolab.jms.authentication.User)>
<org.exolab.jms.persistence.Users: org.exolab.jms.authentication.User get(java.sql.Connection,org.exolab.jms.authentication.User)>
<org.exolab.jms.persistence.Users: java.util.Vector getAllUsers(java.sql.Connection)>
<org.exolab.jms.persistence.Consumers: void add(java.sql.Connection,java.lang.String,java.lang.String)>
<org.exolab.jms.persistence.Consumers: void remove(java.sql.Connection,java.lang.String)>
<org.exolab.jms.persistence.Consumers: long getConsumerId(java.lang.String)>
<org.exolab.jms.persistence.Consumers: boolean exists(java.lang.String)>
<org.exolab.jms.persistence.Consumers: java.util.Vector getDurableConsumers(java.lang.String)>
<org.exolab.jms.persistence.Consumers: java.util.HashMap getAllDurableConsumers()>
<org.exolab.jms.persistence.Consumers: java.lang.String getConsumerName(long)>
<org.exolab.jms.persistence.Consumers: void close()>
<org.exolab.jms.persistence.Consumers: void removeCached(long)>
<org.exolab.jms.authentication.UserManager: boolean createUser(org.exolab.jms.authentication.User)>
<org.exolab.jms.authentication.UserManager: boolean updateUser(org.exolab.jms.authentication.User)>
<org.exolab.jms.authentication.UserManager: boolean deleteUser(org.exolab.jms.authentication.User)>
<org.exolab.jms.authentication.UserManager: org.exolab.jms.authentication.User getUser(org.exolab.jms.authentication.User)>
<org.exolab.jms.authentication.UserManager: boolean validateUser(java.lang.String,java.lang.String)>
<org.exolab.jms.authentication.UserManager: void doStop()>
<org.exolab.jms.client.JmsConnection: void start()>
<org.exolab.jms.client.JmsConnection: void stop()>
<org.exolab.jms.client.JmsConnection: void close()>
<org.exolab.jms.client.JmsConnection: void addSession(org.exolab.jms.client.JmsSession)>
<org.exolab.jms.client.JmsConnection: void removeSession(org.exolab.jms.client.JmsSession)>
<org.exolab.jms.client.JmsConnection: void deleteTemporaryDestination(org.exolab.jms.client.JmsDestination)>
<org.exolab.jms.client.net.SharedORB: org.exolab.jms.net.orb.ORB getInstance()>
<org.exolab.jms.client.net.JmsServerStubImpl: org.exolab.jms.server.ServerConnectionFactory getServerConnectionFactory(java.lang.String,java.lang.String)>
<org.exolab.jms.client.JmsQueueBrowser: java.lang.Object nextElement()>
<org.exolab.jms.client.JmsMessageProducer: void close()>
<org.exolab.jms.client.JmsMessageConsumer: void close()>
<org.exolab.jms.client.JmsXAResource: java.lang.String getResourceManagerId()>
<org.exolab.jms.client.JmsConnectionFactory: org.exolab.jms.client.JmsServerStubIfc getProxy()>
<org.exolab.jms.client.JmsConnectionFactory: void onException(javax.jms.JMSException)>
<org.exolab.jms.client.JmsConnectionFactory: void addConnection(org.exolab.jms.client.JmsConnection)>
<org.exolab.jms.client.JmsConnectionFactory: void removeConnection(org.exolab.jms.client.JmsConnection)>
<org.exolab.jms.client.JmsConnectionFactory: org.exolab.jms.client.JmsConnection[] getConnections()>
<org.exolab.jms.client.JmsTopicSession: javax.jms.TopicSubscriber createSubscriber(javax.jms.Topic,java.lang.String,boolean)>
<org.exolab.jms.client.JmsTopicSession: javax.jms.TopicPublisher createPublisher(javax.jms.Topic)>
<org.exolab.jms.client.JmsSession: void close()>
<org.exolab.jms.client.JmsSession: void start()>
<org.exolab.jms.client.JmsSession: void stop()>
<org.exolab.jms.client.JmsSession: org.exolab.jms.message.MessageImpl receive(long,long)>
<org.exolab.jms.client.JmsSession: void notifyConsumer()>
<org.exolab.jms.net.connector.PoolEntry: boolean isInitialised()>
<org.exolab.jms.net.connector.PoolEntry: void setInitialised()>
<org.exolab.jms.net.connector.MulticastCallerListener: void addCallerListener(java.lang.String,org.exolab.jms.net.connector.CallerListener)>
<org.exolab.jms.net.connector.MulticastCallerListener: void removeCallerListener(java.lang.String,org.exolab.jms.net.connector.CallerListener)>
<org.exolab.jms.net.connector.MulticastCallerListener: org.exolab.jms.net.connector.CallerListener[] getListeners(org.exolab.jms.net.uri.URI)>
<org.exolab.jms.net.connector.DefaultConnectionPool: org.exolab.jms.net.connector.ManagedConnection matchManagedConnections(java.security.Principal,org.exolab.jms.net.connector.ConnectionRequestInfo)>
<org.exolab.jms.net.connector.DefaultConnectionPool: void idle(org.exolab.jms.net.connector.ManagedConnectionHandle)>
<org.exolab.jms.net.connector.DefaultConnectionPool: void startReaper()>
<org.exolab.jms.net.connector.DefaultConnectionPool: void stopReaper()>
<org.exolab.jms.net.connector.ManagedConnectionHandle: void ping()>
<org.exolab.jms.net.connector.ManagedConnectionHandle: boolean pinging()>
<org.exolab.jms.net.connector.ManagedConnectionHandle: void pinged()>
<org.exolab.jms.net.connector.ManagedConnectionHandle: int incPingWaits()>
<org.exolab.jms.net.connector.ManagedConnectionHandle: void setUsed()>
<org.exolab.jms.net.connector.ManagedConnectionHandle: boolean used()>
<org.exolab.jms.net.connector.ManagedConnectionHandle: void clearUsed()>
<org.exolab.jms.net.connector.ManagedConnectionHandle: boolean canDestroy()>
<org.exolab.jms.net.connector.ManagedConnectionHandle: void incActiveConnections()>
<org.exolab.jms.net.connector.ManagedConnectionHandle: void decActiveConnections()>
<org.exolab.jms.net.connector.DefaultConnectionPool$IdleReaper: void run()>
<org.exolab.jms.net.connector.ResourceException: void printStackTrace(java.io.PrintStream)>
<org.exolab.jms.net.connector.ResourceException: void printStackTrace(java.io.PrintWriter)>
<org.exolab.jms.net.connector.AbstractManagedConnection: void setConnectionEventListener(org.exolab.jms.net.connector.ManagedConnectionListener)>
<org.exolab.jms.net.connector.AbstractManagedConnection: org.exolab.jms.net.connector.ManagedConnectionListener getConnectionEventListener()>
<org.exolab.jms.net.connector.AbstractConnectionManager: void setCallerListener(org.exolab.jms.net.connector.CallerListener)>
<org.exolab.jms.net.connector.AbstractConnectionManager: void close()>
<org.exolab.jms.net.connector.AbstractConnectionManager: org.exolab.jms.net.connector.ConnectionFactory getFactoryForConnect(org.exolab.jms.net.uri.URI)>
<org.exolab.jms.net.connector.AbstractConnectionManager: org.exolab.jms.net.connector.ConnectionFactory getFactoryForAccept(org.exolab.jms.net.uri.URI)>
<org.exolab.jms.net.connector.AbstractConnectionManager: void addManagedConnectionFactory(org.exolab.jms.net.connector.ManagedConnectionFactory)>
<org.exolab.jms.net.connector.AbstractConnectionManager: java.util.Collection getManagedConnectionFactories()>
<org.exolab.jms.net.connector.AbstractConnectionManager: org.exolab.jms.net.connector.ConnectionPool getConnectionPool(org.exolab.jms.net.connector.ManagedConnectionFactory)>
<org.exolab.jms.net.orb.RegistryImpl: org.exolab.jms.net.proxy.Proxy lookup(java.lang.String)>
<org.exolab.jms.net.orb.RegistryImpl: void bind(java.lang.String,org.exolab.jms.net.proxy.Proxy)>
<org.exolab.jms.net.orb.RegistryImpl: void unbind(java.lang.String)>
<org.exolab.jms.net.orb.RegistryImpl: void doBind(java.lang.String,org.exolab.jms.net.proxy.Proxy)>
<org.exolab.jms.net.orb.RegistryImpl: void doUnbind(java.lang.String)>
<org.exolab.jms.net.orb.RegistryImpl: void setReadOnly(boolean)>
<org.exolab.jms.net.orb.RegistryImpl: boolean getReadOnly()>
<org.exolab.jms.net.orb.ObjectRef: org.exolab.jms.net.proxy.Proxy addProxy(org.exolab.jms.net.uri.URI)>
<org.exolab.jms.net.orb.ObjectRef: org.exolab.jms.net.proxy.Proxy getProxy(org.exolab.jms.net.uri.URI)>
<org.exolab.jms.net.orb.ObjectRef: org.exolab.jms.net.uri.URI[] getURIs()>
<org.exolab.jms.net.orb.DefaultORB: org.exolab.jms.net.registry.LocalRegistry getRegistry()>
<org.exolab.jms.net.orb.DefaultORB: void unexportObject(java.lang.Object)>
<org.exolab.jms.net.orb.DefaultORB: void addCallerListener(java.lang.String,org.exolab.jms.net.connector.CallerListener)>
<org.exolab.jms.net.orb.DefaultORB: void removeCallerListener(java.lang.String,org.exolab.jms.net.connector.CallerListener)>
<org.exolab.jms.net.orb.DefaultORB: EDU.oswego.cs.dl.util.concurrent.PooledExecutor getThreadPool()>
<org.exolab.jms.net.orb.UnicastDelegate: void dispose()>
<org.exolab.jms.net.orb.UnicastDelegate: org.exolab.jms.net.connector.Connection getConnection()>
<org.exolab.jms.net.orb.AbstractORB: void addRoute(java.lang.String,java.lang.String)>
<org.exolab.jms.net.orb.AbstractORB: org.exolab.jms.net.proxy.Proxy getProxy(java.lang.Object,java.lang.String)>
<org.exolab.jms.net.orb.AbstractORB: java.lang.Object getObject(java.rmi.server.ObjID,java.lang.String)>
<org.exolab.jms.net.orb.AbstractORB: org.exolab.jms.net.proxy.Proxy exportObject(java.lang.Object,java.lang.String)>
<org.exolab.jms.net.orb.AbstractORB: org.exolab.jms.net.proxy.Proxy exportObject(java.lang.Object,java.rmi.server.ObjID,java.lang.String)>
<org.exolab.jms.net.orb.AbstractORB: void unexportObject(java.lang.Object)>
<org.exolab.jms.net.orb.RegistryService: void unbind(java.lang.String)>
<org.exolab.jms.net.http.HTTPSManagedConnectionFactory: void initSSL()>
<org.exolab.jms.net.proxy.RemoteInvocationException: void printStackTrace(java.io.PrintStream)>
<org.exolab.jms.net.proxy.RemoteInvocationException: void printStackTrace(java.io.PrintWriter)>
<org.exolab.jms.net.rmi.RMIManagedConnectionAcceptor: void close()>
<org.exolab.jms.net.rmi.RMIManagedConnection: org.exolab.jms.net.connector.Connection getConnection()>
<org.exolab.jms.net.rmi.RMIManagedConnection: void setInvocationHandler(org.exolab.jms.net.connector.InvocationHandler)>
<org.exolab.jms.net.rmi.RMIManagedConnection: void ping()>
<org.exolab.jms.net.rmi.RMIManagedConnection: void destroy()>
<org.exolab.jms.net.rmi.RMIManagedConnection: void disconnect()>
<org.exolab.jms.net.socket.SocketManagedConnectionAcceptor: void accept(org.exolab.jms.net.connector.ManagedConnectionAcceptorListener)>
<org.exolab.jms.net.socket.SocketManagedConnectionAcceptor: void close()>
<org.exolab.jms.net.multiplexer.MultiplexedManagedConnection: org.exolab.jms.net.connector.Connection getConnection()>
<org.exolab.jms.net.multiplexer.MultiplexedManagedConnection: void ping()>
<org.exolab.jms.net.multiplexer.MultiplexedManagedConnection: void destroy()>
<org.exolab.jms.net.multiplexer.MultiplexedManagedConnection: org.exolab.jms.net.connector.Response invoke(org.exolab.jms.net.connector.Connection,org.exolab.jms.net.connector.Request)>
<org.exolab.jms.net.multiplexer.MultiplexedManagedConnection: java.lang.ThreadGroup getThreadGroup()>
<org.exolab.jms.net.multiplexer.Multiplexer: org.exolab.jms.net.multiplexer.Channel getChannel()>
<org.exolab.jms.net.multiplexer.Multiplexer: void release(org.exolab.jms.net.multiplexer.Channel)>
<org.exolab.jms.net.multiplexer.Multiplexer: void close(org.exolab.jms.net.multiplexer.Channel)>
<org.exolab.jms.net.multiplexer.Multiplexer: void send(byte)>
<org.exolab.jms.net.multiplexer.Multiplexer: void send(byte,int)>
<org.exolab.jms.net.multiplexer.Multiplexer: void send(byte,int,int)>
<org.exolab.jms.net.multiplexer.Multiplexer: void send(byte,int,byte[],int,int)>
<org.exolab.jms.net.multiplexer.Multiplexer: void ping(int)>
<org.exolab.jms.net.multiplexer.Multiplexer: org.exolab.jms.net.multiplexer.Channel open()>
<org.exolab.jms.net.multiplexer.Multiplexer: void shutdown()>
<org.exolab.jms.net.multiplexer.Multiplexer: void handleOpen()>
<org.exolab.jms.net.multiplexer.Multiplexer: void handleClose()>
<org.exolab.jms.net.multiplexer.Multiplexer: void handlePingRequest()>
<org.exolab.jms.net.multiplexer.Multiplexer: org.exolab.jms.net.multiplexer.Channel getChannel(int)>
<org.exolab.jms.net.multiplexer.MultiplexOutputStream: void notifyRead(int)>
<org.exolab.jms.net.multiplexer.MultiplexOutputStream: void disconnected()>
<org.exolab.jms.net.multiplexer.MultiplexOutputStream: void send(byte[],int,int)>
<org.exolab.jms.net.multiplexer.MultiplexOutputStream: int waitForSpace()>
<org.exolab.jms.net.multiplexer.MultiplexInputStream: void destroy()>
<org.exolab.jms.net.multiplexer.MultiplexInputStream: int read(byte[],int,int)>
<org.exolab.jms.net.multiplexer.MultiplexInputStream: int available()>
<org.exolab.jms.net.multiplexer.MultiplexInputStream: void disconnected()>
<org.exolab.jms.net.multiplexer.MultiplexInputStream: void receive(java.io.DataInputStream,int)>
<org.exolab.jms.net.multiplexer.Channel: org.exolab.jms.net.connector.Request readRequest()>
<org.exolab.jms.net.multiplexer.Channel: void writeResponse(org.exolab.jms.net.connector.Response)>
<org.exolab.jms.net.vm.VMManagedConnectionAcceptor: void accept(org.exolab.jms.net.connector.ManagedConnectionAcceptorListener)>
<org.exolab.jms.net.vm.VMManagedConnectionAcceptor: void close()>
<org.exolab.jms.net.vm.VMManagedConnectionAcceptor: org.exolab.jms.net.vm.VMInvoker connect(java.security.Principal,org.exolab.jms.net.connector.URIRequestInfo,org.exolab.jms.net.vm.VMInvoker,org.exolab.jms.net.uri.URI)>
<org.exolab.jms.net.vm.VMManagedConnectionAcceptor: org.exolab.jms.net.vm.VMInvoker accept(java.security.Principal,org.exolab.jms.net.connector.URIRequestInfo,org.exolab.jms.net.vm.VMInvoker,org.exolab.jms.net.uri.URI)>
<org.exolab.jms.net.vm.VMManagedConnection: org.exolab.jms.net.connector.Connection getConnection()>
<org.exolab.jms.net.vm.VMManagedConnection: void setInvocationHandler(org.exolab.jms.net.connector.InvocationHandler)>
<org.exolab.jms.net.vm.VMManagedConnection: void ping()>
<org.exolab.jms.net.vm.VMManagedConnection: void destroy()>
<org.exolab.jms.net.vm.VMManagedConnection: boolean isAliveLocal()>
<org.exolab.jms.net.vm.VMManagedConnection: void destroyLocal()>
<org.exolab.jms.server.ServerConnectionManagerImpl: org.exolab.jms.server.ServerConnection createConnection(java.lang.String,java.lang.String,java.lang.String)>
<org.exolab.jms.server.ServerConnectionManagerImpl: org.exolab.jms.server.ServerConnectionImpl getConnection(long)>
<org.exolab.jms.server.ServerConnectionManagerImpl: void closed(org.exolab.jms.server.ServerConnectionImpl)>
<org.exolab.jms.server.ServerConnectionManagerImpl: void addClientID(java.lang.String)>
<org.exolab.jms.server.ServerConnectionImpl: org.exolab.jms.server.ServerSession createSession(int,boolean)>
<org.exolab.jms.server.ServerConnectionImpl: void close()>
<org.exolab.jms.server.ServerConnectionImpl: void closed(org.exolab.jms.server.ServerSessionImpl)>
<org.exolab.jms.server.SessionConsumer: void setMessageListener(org.exolab.jms.client.JmsMessageListener)>
<org.exolab.jms.server.SessionConsumer: void addConsumer(org.exolab.jms.messagemgr.ConsumerEndpoint)>
<org.exolab.jms.server.SessionConsumer: org.exolab.jms.messagemgr.ConsumerEndpoint removeConsumer(long)>
<org.exolab.jms.server.SessionConsumer: org.exolab.jms.messagemgr.ConsumerEndpoint[] getConsumers()>
<org.exolab.jms.server.SessionConsumer: void stop()>
<org.exolab.jms.server.SessionConsumer: void start()>
<org.exolab.jms.server.SessionConsumer: void recover()>
<org.exolab.jms.server.SessionConsumer: void commit()>
<org.exolab.jms.server.SessionConsumer: void rollback()>
<org.exolab.jms.server.SessionConsumer: void acknowledge(long,java.lang.String)>
<org.exolab.jms.server.SessionConsumer: void close()>
<org.exolab.jms.server.SessionConsumer: void dispatch()>
<org.exolab.jms.server.SessionConsumer: boolean queue(org.exolab.jms.messagemgr.ConsumerEndpoint)>
<org.exolab.jms.server.SessionConsumer: boolean send(org.exolab.jms.messagemgr.ConsumerEndpoint,org.exolab.jms.messagemgr.Condition)>
<org.exolab.jms.server.net.RemoteServerSession: void close()>
<org.exolab.jms.server.ServerSessionImpl: void close()>
<org.exolab.jms.messagemgr.DurableConsumerEndpoint: void activate(long,java.lang.String,boolean)>
<org.exolab.jms.messagemgr.DurableConsumerEndpoint: void deactivate()>
<org.exolab.jms.messagemgr.DurableConsumerEndpoint: boolean isActive()>
<org.exolab.jms.messagemgr.QueueDestinationCache: org.exolab.jms.messagemgr.MessageHandle getMessage(org.exolab.jms.selector.Selector,org.exolab.jms.messagemgr.Condition)>
<org.exolab.jms.messagemgr.QueueDestinationCache: org.exolab.jms.messagemgr.ConsumerEndpoint getConsumerForMessage(org.exolab.jms.message.MessageImpl)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: void subscribe(org.exolab.jms.client.JmsTopic,java.lang.String,java.lang.String)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: void unsubscribe(java.lang.String,java.lang.String)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: void unsubscribe(org.exolab.jms.client.JmsTopic)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: org.exolab.jms.messagemgr.ConsumerEndpoint createConsumer(org.exolab.jms.client.JmsDestination,long,java.lang.String,boolean)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: org.exolab.jms.messagemgr.DurableConsumerEndpoint createDurableConsumer(org.exolab.jms.client.JmsTopic,java.lang.String,java.lang.String,long,boolean,java.lang.String)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: org.exolab.jms.messagemgr.ConsumerEndpoint createQueueBrowser(org.exolab.jms.client.JmsQueue,java.lang.String)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: void closeConsumer(org.exolab.jms.messagemgr.ConsumerEndpoint)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: org.exolab.jms.messagemgr.ConsumerEndpoint getConsumerEndpoint(long)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: org.exolab.jms.messagemgr.ConsumerEndpoint getConsumerEndpoint(java.lang.String)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: boolean hasActiveConsumers(org.exolab.jms.client.JmsDestination)>
<org.exolab.jms.messagemgr.ConsumerManagerImpl: void doStop()>
<org.exolab.jms.messagemgr.AbstractConsumerEndpoint: org.exolab.jms.messagemgr.MessageHandle receive(org.exolab.jms.messagemgr.Condition)>
<org.exolab.jms.messagemgr.AbstractConsumerEndpoint: void setAsynchronous(boolean)>
<org.exolab.jms.messagemgr.AbstractConsumerEndpoint: boolean isAsynchronous()>
<org.exolab.jms.messagemgr.AbstractConsumerEndpoint: void setWaitingForMessage(org.exolab.jms.messagemgr.Condition)>
<org.exolab.jms.messagemgr.AbstractConsumerEndpoint: boolean isWaitingForMessage()>
<org.exolab.jms.messagemgr.AbstractConsumerEndpoint: void setListener(org.exolab.jms.messagemgr.ConsumerEndpointListener)>
<org.exolab.jms.messagemgr.AbstractConsumerEndpoint: void close()>
<org.exolab.jms.messagemgr.AbstractConsumerEndpoint: void notifyMessageAvailable()>
<org.exolab.jms.messagemgr.Flag: boolean get()>
<org.exolab.jms.messagemgr.Flag: void set(boolean)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: org.exolab.jms.messagemgr.DestinationCache getDestinationCache(org.exolab.jms.client.JmsDestination)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: org.exolab.jms.client.JmsDestination getDestination(java.lang.String)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: void addDestinationEventListener(org.exolab.jms.messagemgr.DestinationEventListener)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: void removeDestinationEventListener(org.exolab.jms.messagemgr.DestinationEventListener)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: void createDestination(org.exolab.jms.client.JmsDestination)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: void removeDestination(org.exolab.jms.client.JmsDestination)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: java.util.List getDestinations()>
<org.exolab.jms.messagemgr.DestinationManagerImpl: java.util.Map getTopicDestinationCaches(org.exolab.jms.client.JmsTopic)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: void collectGarbage(boolean)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: void doStop()>
<org.exolab.jms.messagemgr.DestinationManagerImpl: void destroyDestinationCache(org.exolab.jms.client.JmsDestination)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: void addToDestinations(org.exolab.jms.client.JmsDestination)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: void removeFromDestinations(org.exolab.jms.client.JmsDestination)>
<org.exolab.jms.messagemgr.DestinationManagerImpl: org.exolab.jms.messagemgr.DestinationEventListener[] getListeners()>
<org.exolab.jms.messagemgr.AbstractMessageRef: void reference()>
<org.exolab.jms.messagemgr.AbstractMessageRef: void dereference()>
<org.exolab.jms.messagemgr.ResourceManager: void logPublishedMessage(javax.transaction.xa.Xid,org.exolab.jms.message.MessageImpl)>
<org.exolab.jms.messagemgr.ResourceManager: void logReceivedMessage(javax.transaction.xa.Xid,long,org.exolab.jms.messagemgr.MessageHandle)>
<org.exolab.jms.messagemgr.ResourceManager: void logTransactionState(javax.transaction.xa.Xid,org.exolab.jms.tranlog.TransactionState)>
<org.exolab.jms.messagemgr.ResourceManager: void logTransactionData(org.exolab.jms.tranlog.ExternalXid,java.lang.String,java.lang.Object)>
<org.exolab.jms.messagemgr.ResourceManager: void garbageCollect()>
<org.exolab.jms.messagemgr.ResourceManager: void commit(javax.transaction.xa.Xid,boolean)>
<org.exolab.jms.messagemgr.ResourceManager: void end(javax.transaction.xa.Xid,int)>
<org.exolab.jms.messagemgr.ResourceManager: void forget(javax.transaction.xa.Xid)>
<org.exolab.jms.messagemgr.ResourceManager: int getTransactionTimeout()>
<org.exolab.jms.messagemgr.ResourceManager: boolean isSameRM(javax.transaction.xa.XAResource)>
<org.exolab.jms.messagemgr.ResourceManager: int prepare(javax.transaction.xa.Xid)>
<org.exolab.jms.messagemgr.ResourceManager: javax.transaction.xa.Xid[] recover(int)>
<org.exolab.jms.messagemgr.ResourceManager: void rollback(javax.transaction.xa.Xid)>
<org.exolab.jms.messagemgr.ResourceManager: boolean setTransactionTimeout(int)>
<org.exolab.jms.messagemgr.ResourceManager: void start(javax.transaction.xa.Xid,int)>
<org.exolab.jms.messagemgr.ResourceManager: org.exolab.jms.tranlog.TransactionLog createNextTransactionLog()>
<org.exolab.jms.messagemgr.ResourceManager: void buildLogFileList()>
<org.exolab.jms.messagemgr.ResourceManager: void recover()>
<org.exolab.jms.messagemgr.ResourceManager: org.exolab.jms.tranlog.TransactionLog getCurrentTransactionLog()>
<org.exolab.jms.messagemgr.ResourceManager: void addTridLogEntry(org.exolab.jms.tranlog.ExternalXid,org.exolab.jms.tranlog.TransactionLog)>
<org.exolab.jms.messagemgr.ResourceManager: void removeTridLogEntry(org.exolab.jms.tranlog.ExternalXid,org.exolab.jms.tranlog.TransactionLog)>
<org.exolab.jms.messagemgr.ResourceManager: boolean isTransactionActive(org.exolab.jms.tranlog.ExternalXid)>
<org.exolab.jms.messagemgr.AbstractDestinationCache: void destroy()>
<org.exolab.jms.messagemgr.AbstractDestinationCache: void onLeaseExpired(java.lang.Object)>
<org.exolab.jms.messagemgr.AbstractDestinationCache: void checkMessageExpiry(org.exolab.jms.messagemgr.MessageRef,long)>
<org.exolab.jms.messagemgr.MessageQueue: boolean add(org.exolab.jms.messagemgr.MessageHandle)>
<org.exolab.jms.messagemgr.MessageQueue: boolean contains(org.exolab.jms.messagemgr.MessageHandle)>
<org.exolab.jms.messagemgr.MessageQueue: org.exolab.jms.messagemgr.MessageHandle[] toArray()>
<org.exolab.jms.messagemgr.MessageQueue: org.exolab.jms.messagemgr.MessageHandle remove(org.exolab.jms.messagemgr.MessageHandle)>
<org.exolab.jms.messagemgr.MessageQueue: org.exolab.jms.messagemgr.MessageHandle remove(java.lang.String)>
<org.exolab.jms.messagemgr.MessageQueue: void clear()>
<org.exolab.jms.messagemgr.MessageQueue: int size()>
<org.exolab.jms.messagemgr.MessageQueue: org.exolab.jms.messagemgr.MessageHandle removeFirst()>
<org.exolab.jms.messagemgr.MessageMgr: long getNextSequenceNumber()>
<org.exolab.jms.messagemgr.CachedMessageRef: void destroy()>
<org.exolab.jms.messagemgr.DefaultMessageCache: void addMessage(org.exolab.jms.messagemgr.MessageRef,org.exolab.jms.message.MessageImpl)>
<org.exolab.jms.messagemgr.DefaultMessageCache: void addMessageRef(org.exolab.jms.messagemgr.MessageRef)>
<org.exolab.jms.messagemgr.DefaultMessageCache: org.exolab.jms.messagemgr.MessageRef getMessageRef(java.lang.String)>
<org.exolab.jms.messagemgr.DefaultMessageCache: org.exolab.jms.message.MessageImpl getMessage(org.exolab.jms.messagemgr.MessageRef)>
<org.exolab.jms.messagemgr.DefaultMessageCache: void destroy(org.exolab.jms.messagemgr.MessageRef)>
<org.exolab.jms.messagemgr.DefaultMessageCache: void clear()>
<org.exolab.jms.messagemgr.DefaultMessageCache: void clearPersistentMessages()>
<org.exolab.jms.messagemgr.DefaultMessageCache: int getTransientCount()>
<org.exolab.jms.messagemgr.DefaultMessageCache: int getPersistentCount()>
<org.exolab.jms.messagemgr.DefaultMessageCache: int getMessageCount()>
